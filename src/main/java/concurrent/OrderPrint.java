package concurrent;import java.util.concurrent.Semaphore;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * Created with IntelliJ IDEA. * Project: test-jar * Author: Kevin * Date: 2019/2/21 * Time: 2:36 PM * 多个线程按照顺序输出ABC */public class OrderPrint {	public static void main(String[] args) {//		SemaphoreMethod semaphoreMethod = new SemaphoreMethod();//		semaphoreMethod.orderPrint();		LockMethod lockMethod = new LockMethod();		lockMethod.orderPrint();	}	static class SemaphoreMethod{				Semaphore semaphoreA = new Semaphore(1);		Semaphore semaphoreB = new Semaphore(0);		Semaphore semaphoreC = new Semaphore(0);		int printTimes = 0;		private void printA(){			try {				print("A", semaphoreA, semaphoreB);			} catch (InterruptedException e) {				e.printStackTrace();			}		}		private void printB(){			try {				print("B", semaphoreB, semaphoreC);			} catch (InterruptedException e) {				e.printStackTrace();			}		}		private void printC(){			try {				print("C", semaphoreC, semaphoreA);			} catch (InterruptedException e) {				e.printStackTrace();			}		}		private void print(String name, Semaphore current, Semaphore next) throws InterruptedException {			while (printTimes <= 10) {				current.acquire();				System.out.print(name);				printTimes++;				next.release();			}		}		private void orderPrint() {			new Thread(this::printA).start();			new Thread(this::printB).start();			new Thread(this::printC).start();		}	}	static class LockMethod {		Lock lock =  new ReentrantLock();		int state = 0;				private void printA(){			try {				print("A", 0);			} catch (InterruptedException e) {				e.printStackTrace();			}		}		private void printB(){			try {				print("B", 1);			} catch (InterruptedException e) {				e.printStackTrace();			}		}		private void printC(){			try {				print("C",2);			} catch (InterruptedException e) {				e.printStackTrace();			}		}		private void print(String name,int target) throws InterruptedException {			for (int i = 0; i < 10;) {				lock.lock();				if (state % 3 == target) {					state++;					System.out.print(name);					i++;				}				lock.unlock();			}		}		private void orderPrint() {			new Thread(this::printA).start();			new Thread(this::printB).start();			new Thread(this::printC).start();		}	}}